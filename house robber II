class Solution {
public:
int recursion(int index,vector<int>&temp,vector<int>&dp){
        //base case
        //if you have reached index 0 mean you haven't robbed house no 1, you robbed house 2. so you can rob it
        if(index==0) return temp[index];
        if(index<0 ) return 0;
        if(dp[index]!=-1) return dp[index];
        int rob=temp[index]+recursion(index-2,temp,dp);
        int no_rob=recursion(index-1,temp,dp);
        return dp[index]= max(rob,no_rob);
    }
    int rob(vector<int>& nums) {
        if(nums.size()==1) return nums[0];
        vector<int>temp1;
        vector<int>temp2;
        vector<int>dp1(nums.size()-1,-1);
        vector<int>dp2(nums.size()-1,-1);
        for(int i=0;i<nums.size();i++){
            if(i!=0) temp1.push_back(nums[i]);
            if(i!=nums.size()-1) temp2.push_back(nums[i]);

        }
            int res1=recursion(temp1.size()-1,temp1,dp1);
            int res2=recursion(temp2.size()-1,temp2,dp2);
          return max(res1,res2);
    }
};
